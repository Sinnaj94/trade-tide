// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Category {
    id          String @id @default(cuid())
    name        String
    Item        Item[]
    description String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    isAdmin       Boolean
    Comment       Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Link {
    id        String      @id @default(cuid())
    title     String?
    url       String
    ItemLinks ItemLinks[]
}

model ItemLinks {
    link   Link   @relation(fields: [linkId], references: [id])
    item   Item   @relation(fields: [itemId], references: [id])
    linkId String
    itemId String

    @@id([linkId, itemId])
}

model Comment {
    user    User   @relation(fields: [userId], references: [id])
    item    Item   @relation(fields: [itemId], references: [id])
    content String
    userId  String
    itemId  String

    @@id([userId, itemId])
}

model Item {
    id           String      @id @default(cuid())
    title        String
    description  String?
    creator      User        @relation(fields: [userId], references: [id])
    userId       String
    isApproved   Boolean     @default(false)
    Comment      Comment[]
    category     Category    @relation(fields: [categoryId], references: [id])
    categoryId   String
    ItemLinks    ItemLinks[]
    createdAt    DateTime    @default(now())
    votesFor     Int         @default(0)
    votesAgainst Int         @default(0)
}
