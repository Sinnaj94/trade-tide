import { type NextPage } from "next";
import { FaThumbsDown, FaThumbsUp, FaComment } from 'react-icons/fa';
import { inferProcedureOutput } from "@trpc/server";
import { RouterInputs, RouterOutputs } from "../utils/api";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import type { Category, Item, ItemLinks, Link } from "@prisma/client";
import { useRouter } from "next/router";

const Home: NextPage = () => {
  const categories = api.category.getAll.useQuery();
  const items = api.item.getMostRecent.useQuery();
  const voting = api.item.voteForItem.useMutation({
    onSuccess: () => {
      items.refetch().catch(() => {
        console.error('Error')
      })
    }
  });
  const router = useRouter()

  const voteFor = (id: string) => {
    voting.mutate({
      id: id,
      positive: true
    })
  }

  const voteAgainst = (id: string) => {
    voting.mutate({
      id: id,
      positive: false
    })
  }

  const visitItem = (id: string) => {
    router.push(`/items/${id}`).catch((e) => {
      console.warn(e)
    })
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavigationBar />
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        Hallo
      </main >
    </>
  );
};

export default Home;

const NavigationBar: React.FC = () => {
  const { data: sessionData } = useSession();
  return (
    <nav className="bg-white border-gray-200 px-2 sm:px-4 py-2.5 dark:bg-gray-900 sticky top-0 z-50">
      <div className="container flex flex-wrap items-center justify-around mx-auto space-x-10">
        <a href="https://flowbite.com/" className="flex items-center">
          <img src="https://flowbite.com/docs/images/logo.svg" className="h-6 mr-3 sm:h-9" alt="Flowbite Logo" />
          <span className="self-center text-xl font-semibold whitespace-nowrap dark:text-white">Trade Tide</span>
        </a>
        <button data-collapse-toggle="navbar-default" type="button" className="inline-flex items-center p-2 ml-3 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
          <span className="sr-only">Open main menu</span>
          <svg className="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg>
        </button>
        <form className="grow">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
              <svg aria-hidden="true" className="w-5 h-5 text-gray-500 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
            </div>
            <input type="search" id="default-search" className="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="What do you wanna buy?" required />
            <button type="submit" className="text-white absolute right-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Search</button>
          </div>
        </form>
        <a
          href="#"
          className="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          aria-current="page"
        >{sessionData ? "Sign out" : "Sign in"}</a>
      </div>
    </nav>
  )
}

const CategoryTile: React.FC<{ category: Category, className?: string }> = ({ category, className }) => {
  return (
    <div className={`p-4 flex ${className || ''}`}>
      <div className="h-full flex flex-col items-center justify-between w-96 bg-gray-800 px-8 pt-16 pb-24 rounded-lg overflow-hidden text-center relative">
        <h2 className="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">CATEGORY</h2>
        <h1 className="title-font sm:text-2xl text-xl font-medium text-white mb-3">{category.name}</h1>
        <p className="leading-relaxed mb-3">{category.description}</p>
        <button className="text-indigo-400 flex items-center">Check it out
          <svg className="w-4 h-4 ml-2" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path d="M5 12h14"></path>
            <path d="M12 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>
    </div>
  )
}

type ItemFromServer = RouterOutputs['item']['getMostRecent'][0]

const ItemTile: React.FC<{
  item: ItemFromServer,
  like: () => void,
  dislike: () => void,
  visit: () => void
}> = (props) => {
  return (
    <div className="p-4 xl:w-1/3 md:w-1/2 sm:w-1/2">
      <div className="h-full border-2 border-gray-800 rounded-lg overflow-hidden bg-gray-900 flex flex-col">
        <img className="lg:h-48 md:h-36 w-full object-cover object-center" src={props.item.ItemLinks.at(0)?.link.url || 'https://joadre.com/wp-content/uploads/2019/02/no-image.jpg'} alt="blog" />
        <div className="p-6 flex flex-col justify-between flex-1">
          <h2 className="tracking-widest text-xs title-font font-medium text-gray-500 mb-1">{props.item.category.name.toUpperCase()}</h2>
          <h1 className="title-font text-lg font-medium text-white mb-3">{props.item.title}</h1>
          <p className="leading-relaxed mb-3 text-gray-400 line-clamp-3">{props.item.description}</p>
          <div className="flex items-center flex-wrap mt-auto">
            <button onClick={() => props.visit()} className="text-indigo-500 inline-flex items-center md:mb-2 lg:mb-0">Learn More
              <svg className="w-4 h-4 ml-2" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path d="M5 12h14"></path>
                <path d="M12 5l7 7-7 7"></path>
              </svg>
            </button>
            <span className="text-gray-400 mr-3 inline-flex items-center lg:ml-auto md:ml-0 ml-auto leading-none text-sm pr-3 py-1 border-r-2 border-gray-600">
              <button className="flex flex-row" onClick={() => props.like()}>
                <FaThumbsUp className="w-4 h-4 mr-2">
                </FaThumbsUp>{props.item.votesFor}
              </button>

            </span>
            <span className="text-gray-400 mr-3 inline-flex items-center md:ml-0 leading-none text-sm pr-3 py-1 border-r-2 border-gray-600">
              <button className="flex flex-row" onClick={() => props.dislike()}>
                <FaThumbsDown className="w-4 h-4 mr-2">
                </FaThumbsDown>{props.item.votesAgainst}
              </button>
            </span>
            <span className="text-gray-400 inline-flex items-center leading-none text-sm">
              <FaComment className="w-4 h-4 mr-2">
              </FaComment>0
            </span>
          </div>
        </div>
      </div>
    </div >
  )
}

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();


  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      <button
        className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div >
  );
};
